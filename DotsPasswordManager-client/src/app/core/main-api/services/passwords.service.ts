/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { UserSavedPasswordDtOsSavedPasswordDto } from '../models/user-saved-password-dt-os-saved-password-dto';
import { userSavedPasswordCreatePasswordEndpoint } from '../fn/passwords/user-saved-password-create-password-endpoint';
import { UserSavedPasswordCreatePasswordEndpoint$Params } from '../fn/passwords/user-saved-password-create-password-endpoint';
import { UserSavedPasswordDeletePasswordDeletePasswordResponse } from '../models/user-saved-password-delete-password-delete-password-response';
import { userSavedPasswordDeletePasswordEndpoint } from '../fn/passwords/user-saved-password-delete-password-endpoint';
import { UserSavedPasswordDeletePasswordEndpoint$Params } from '../fn/passwords/user-saved-password-delete-password-endpoint';
import { userSavedPasswordGetPasswordEndpoint } from '../fn/passwords/user-saved-password-get-password-endpoint';
import { UserSavedPasswordGetPasswordEndpoint$Params } from '../fn/passwords/user-saved-password-get-password-endpoint';
import { userSavedPasswordGetPasswordsEndpoint } from '../fn/passwords/user-saved-password-get-passwords-endpoint';
import { UserSavedPasswordGetPasswordsEndpoint$Params } from '../fn/passwords/user-saved-password-get-passwords-endpoint';
import { userSavedPasswordToggleFavouriteEndpoint } from '../fn/passwords/user-saved-password-toggle-favourite-endpoint';
import { UserSavedPasswordToggleFavouriteEndpoint$Params } from '../fn/passwords/user-saved-password-toggle-favourite-endpoint';
import { userSavedPasswordUpdatePasswordEndpoint } from '../fn/passwords/user-saved-password-update-password-endpoint';
import { UserSavedPasswordUpdatePasswordEndpoint$Params } from '../fn/passwords/user-saved-password-update-password-endpoint';

@Injectable({ providedIn: 'root' })
export class PasswordsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userSavedPasswordUpdatePasswordEndpoint()` */
  static readonly UserSavedPasswordUpdatePasswordEndpointPath = '/passwords/edit/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userSavedPasswordUpdatePasswordEndpoint()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userSavedPasswordUpdatePasswordEndpoint$Response(params: UserSavedPasswordUpdatePasswordEndpoint$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSavedPasswordDtOsSavedPasswordDto>> {
    return userSavedPasswordUpdatePasswordEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userSavedPasswordUpdatePasswordEndpoint$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userSavedPasswordUpdatePasswordEndpoint(params: UserSavedPasswordUpdatePasswordEndpoint$Params, context?: HttpContext): Observable<UserSavedPasswordDtOsSavedPasswordDto> {
    return this.userSavedPasswordUpdatePasswordEndpoint$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSavedPasswordDtOsSavedPasswordDto>): UserSavedPasswordDtOsSavedPasswordDto => r.body)
    );
  }

  /** Path part for operation `userSavedPasswordToggleFavouriteEndpoint()` */
  static readonly UserSavedPasswordToggleFavouriteEndpointPath = '/passwords/{Id}/toggle-favourite';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userSavedPasswordToggleFavouriteEndpoint()` instead.
   *
   * This method doesn't expect any request body.
   */
  userSavedPasswordToggleFavouriteEndpoint$Response(params: UserSavedPasswordToggleFavouriteEndpoint$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSavedPasswordDtOsSavedPasswordDto>> {
    return userSavedPasswordToggleFavouriteEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userSavedPasswordToggleFavouriteEndpoint$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userSavedPasswordToggleFavouriteEndpoint(params: UserSavedPasswordToggleFavouriteEndpoint$Params, context?: HttpContext): Observable<UserSavedPasswordDtOsSavedPasswordDto> {
    return this.userSavedPasswordToggleFavouriteEndpoint$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSavedPasswordDtOsSavedPasswordDto>): UserSavedPasswordDtOsSavedPasswordDto => r.body)
    );
  }

  /** Path part for operation `userSavedPasswordGetPasswordEndpoint()` */
  static readonly UserSavedPasswordGetPasswordEndpointPath = '/passwords/{Id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userSavedPasswordGetPasswordEndpoint()` instead.
   *
   * This method doesn't expect any request body.
   */
  userSavedPasswordGetPasswordEndpoint$Response(params: UserSavedPasswordGetPasswordEndpoint$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSavedPasswordDtOsSavedPasswordDto>> {
    return userSavedPasswordGetPasswordEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userSavedPasswordGetPasswordEndpoint$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userSavedPasswordGetPasswordEndpoint(params: UserSavedPasswordGetPasswordEndpoint$Params, context?: HttpContext): Observable<UserSavedPasswordDtOsSavedPasswordDto> {
    return this.userSavedPasswordGetPasswordEndpoint$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSavedPasswordDtOsSavedPasswordDto>): UserSavedPasswordDtOsSavedPasswordDto => r.body)
    );
  }

  /** Path part for operation `userSavedPasswordDeletePasswordEndpoint()` */
  static readonly UserSavedPasswordDeletePasswordEndpointPath = '/passwords/{Id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userSavedPasswordDeletePasswordEndpoint()` instead.
   *
   * This method doesn't expect any request body.
   */
  userSavedPasswordDeletePasswordEndpoint$Response(params: UserSavedPasswordDeletePasswordEndpoint$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSavedPasswordDeletePasswordDeletePasswordResponse>> {
    return userSavedPasswordDeletePasswordEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userSavedPasswordDeletePasswordEndpoint$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userSavedPasswordDeletePasswordEndpoint(params: UserSavedPasswordDeletePasswordEndpoint$Params, context?: HttpContext): Observable<UserSavedPasswordDeletePasswordDeletePasswordResponse> {
    return this.userSavedPasswordDeletePasswordEndpoint$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSavedPasswordDeletePasswordDeletePasswordResponse>): UserSavedPasswordDeletePasswordDeletePasswordResponse => r.body)
    );
  }

  /** Path part for operation `userSavedPasswordGetPasswordsEndpoint()` */
  static readonly UserSavedPasswordGetPasswordsEndpointPath = '/passwords';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userSavedPasswordGetPasswordsEndpoint()` instead.
   *
   * This method doesn't expect any request body.
   */
  userSavedPasswordGetPasswordsEndpoint$Response(params?: UserSavedPasswordGetPasswordsEndpoint$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserSavedPasswordDtOsSavedPasswordDto>>> {
    return userSavedPasswordGetPasswordsEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userSavedPasswordGetPasswordsEndpoint$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userSavedPasswordGetPasswordsEndpoint(params?: UserSavedPasswordGetPasswordsEndpoint$Params, context?: HttpContext): Observable<Array<UserSavedPasswordDtOsSavedPasswordDto>> {
    return this.userSavedPasswordGetPasswordsEndpoint$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserSavedPasswordDtOsSavedPasswordDto>>): Array<UserSavedPasswordDtOsSavedPasswordDto> => r.body)
    );
  }

  /** Path part for operation `userSavedPasswordCreatePasswordEndpoint()` */
  static readonly UserSavedPasswordCreatePasswordEndpointPath = '/passwords/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userSavedPasswordCreatePasswordEndpoint()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userSavedPasswordCreatePasswordEndpoint$Response(params: UserSavedPasswordCreatePasswordEndpoint$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSavedPasswordDtOsSavedPasswordDto>> {
    return userSavedPasswordCreatePasswordEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userSavedPasswordCreatePasswordEndpoint$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userSavedPasswordCreatePasswordEndpoint(params: UserSavedPasswordCreatePasswordEndpoint$Params, context?: HttpContext): Observable<UserSavedPasswordDtOsSavedPasswordDto> {
    return this.userSavedPasswordCreatePasswordEndpoint$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSavedPasswordDtOsSavedPasswordDto>): UserSavedPasswordDtOsSavedPasswordDto => r.body)
    );
  }

}
