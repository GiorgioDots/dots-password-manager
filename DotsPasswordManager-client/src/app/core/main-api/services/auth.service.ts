/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { userAuthLoginEndpoint } from '../fn/auth/user-auth-login-endpoint';
import { UserAuthLoginEndpoint$Params } from '../fn/auth/user-auth-login-endpoint';
import { UserAuthLoginResponse } from '../models/user-auth-login-response';
import { userAuthRefreshTokenEndpoint } from '../fn/auth/user-auth-refresh-token-endpoint';
import { UserAuthRefreshTokenEndpoint$Params } from '../fn/auth/user-auth-refresh-token-endpoint';
import { UserAuthRefreshTokenResponse } from '../models/user-auth-refresh-token-response';
import { userAuthRegisterEndpoint } from '../fn/auth/user-auth-register-endpoint';
import { UserAuthRegisterEndpoint$Params } from '../fn/auth/user-auth-register-endpoint';
import { UserAuthRegisterResponse } from '../models/user-auth-register-response';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userAuthRegisterEndpoint()` */
  static readonly UserAuthRegisterEndpointPath = '/auth/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userAuthRegisterEndpoint()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userAuthRegisterEndpoint$Response(
    params: UserAuthRegisterEndpoint$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<UserAuthRegisterResponse>> {
    return userAuthRegisterEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userAuthRegisterEndpoint$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userAuthRegisterEndpoint(
    params: UserAuthRegisterEndpoint$Params,
    context?: HttpContext
  ): Observable<UserAuthRegisterResponse> {
    return this.userAuthRegisterEndpoint$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<UserAuthRegisterResponse>
        ): UserAuthRegisterResponse => r.body
      )
    );
  }

  /** Path part for operation `userAuthRefreshTokenEndpoint()` */
  static readonly UserAuthRefreshTokenEndpointPath = '/auth/refresh-token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userAuthRefreshTokenEndpoint()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userAuthRefreshTokenEndpoint$Response(
    params: UserAuthRefreshTokenEndpoint$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<UserAuthRefreshTokenResponse>> {
    return userAuthRefreshTokenEndpoint(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userAuthRefreshTokenEndpoint$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userAuthRefreshTokenEndpoint(
    params: UserAuthRefreshTokenEndpoint$Params,
    context?: HttpContext
  ): Observable<UserAuthRefreshTokenResponse> {
    return this.userAuthRefreshTokenEndpoint$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<UserAuthRefreshTokenResponse>
        ): UserAuthRefreshTokenResponse => r.body
      )
    );
  }

  /** Path part for operation `userAuthLoginEndpoint()` */
  static readonly UserAuthLoginEndpointPath = '/auth/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userAuthLoginEndpoint()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userAuthLoginEndpoint$Response(
    params: UserAuthLoginEndpoint$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<UserAuthLoginResponse>> {
    return userAuthLoginEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userAuthLoginEndpoint$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userAuthLoginEndpoint(
    params: UserAuthLoginEndpoint$Params,
    context?: HttpContext
  ): Observable<UserAuthLoginResponse> {
    return this.userAuthLoginEndpoint$Response(params, context).pipe(
      map(
        (r: StrictHttpResponse<UserAuthLoginResponse>): UserAuthLoginResponse =>
          r.body
      )
    );
  }
}
