/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { userLoginEndpoint } from '../fn/auth/user-login-endpoint';
import { UserLoginEndpoint$Params } from '../fn/auth/user-login-endpoint';
import { UserLoginResponse } from '../models/user-login-response';
import { userRefreshTokenEndpoint } from '../fn/auth/user-refresh-token-endpoint';
import { UserRefreshTokenEndpoint$Params } from '../fn/auth/user-refresh-token-endpoint';
import { UserRefreshTokenResponse } from '../models/user-refresh-token-response';
import { userRegisterEndpoint } from '../fn/auth/user-register-endpoint';
import { UserRegisterEndpoint$Params } from '../fn/auth/user-register-endpoint';
import { UserRegisterResponse } from '../models/user-register-response';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userRegisterEndpoint()` */
  static readonly UserRegisterEndpointPath = '/auth/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userRegisterEndpoint()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userRegisterEndpoint$Response(params: UserRegisterEndpoint$Params, context?: HttpContext): Observable<StrictHttpResponse<UserRegisterResponse>> {
    return userRegisterEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userRegisterEndpoint$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userRegisterEndpoint(params: UserRegisterEndpoint$Params, context?: HttpContext): Observable<UserRegisterResponse> {
    return this.userRegisterEndpoint$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserRegisterResponse>): UserRegisterResponse => r.body)
    );
  }

  /** Path part for operation `userRefreshTokenEndpoint()` */
  static readonly UserRefreshTokenEndpointPath = '/auth/refresh-token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userRefreshTokenEndpoint()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userRefreshTokenEndpoint$Response(params: UserRefreshTokenEndpoint$Params, context?: HttpContext): Observable<StrictHttpResponse<UserRefreshTokenResponse>> {
    return userRefreshTokenEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userRefreshTokenEndpoint$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userRefreshTokenEndpoint(params: UserRefreshTokenEndpoint$Params, context?: HttpContext): Observable<UserRefreshTokenResponse> {
    return this.userRefreshTokenEndpoint$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserRefreshTokenResponse>): UserRefreshTokenResponse => r.body)
    );
  }

  /** Path part for operation `userLoginEndpoint()` */
  static readonly UserLoginEndpointPath = '/auth/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userLoginEndpoint()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userLoginEndpoint$Response(params: UserLoginEndpoint$Params, context?: HttpContext): Observable<StrictHttpResponse<UserLoginResponse>> {
    return userLoginEndpoint(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userLoginEndpoint$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userLoginEndpoint(params: UserLoginEndpoint$Params, context?: HttpContext): Observable<UserLoginResponse> {
    return this.userLoginEndpoint$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserLoginResponse>): UserLoginResponse => r.body)
    );
  }

}
